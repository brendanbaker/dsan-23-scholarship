---
title: "Visualizing the Data Science Job Market"
author: "Brendan Baker"
toc: true
toc-title: "Skip to..."
toc-depth: 2
navbar: false
echo: false
results: asis
embed-resources: false
---

## ü§ù Introduction

The present state of the economy (as of May 2023) is uncertain at best, with some bearish analysts warning of recession while others claim it's business as usual.  A recent <a href="https://www.forbes.com/advisor/investing/are-we-in-a-recession/" target="_blank">Forbes advisor article</a> tracked 15 market performance metrics and rated 3 as good, 4 as neutral, and 8 as bad.  Two conflicting consumer confidence surveys were listed - one rated good, the other rated bad.  On the other hand, a recent <a href="https://www.nerdwallet.com/article/finance/are-we-in-a-recession" target="_blank">nerdwallet</a> article dated May 3rd plainly states that "According to a traditional definition, the U.S. is not currently in a recession."  

I am not an economist; rather, I am a graduate student at Georgetown University's Data Science and Analytics (DSAN) program.  Since I will need to find a job after I graduate, I'd like to understand the current state of the job market for data scientists.  I think creating some visualizations using the data provided for our scholarship project might give us an intuitive sense of how the data science market looks right now.  At the very least, I hope to answer a few questions that I've had when trying to navigate job postings.  

The data provided for this mini-project comes from a web-crawling exercise that involved searching for jobs using 11 different terms on April 14th, 2023.  These search terms were:

 * `data scientist`
 * `data analyst`
 * `neural networks`
 * `big data and cloud computing`
 * `machine learning`
 * `reinforcement learning`
 * `deep learning`
 * `time series`
 * `time series analysis` (combined with time series)
 * `block chain`
 * `natural language processing`

The searches were also divided into two categories based on their location: nationwide, and here in Washington, D.C.  You can see a sample job posting below:
  

![An example job posting.](./pics/jobposting.png)
<font size='3'><center>*Screenshot of an example job posting.  Many postings list several qualifications, responsibilities, and benefits.*</center></font>
 
There were a total of 823 unique job postings.  From these postings, there were 458 unique job titles, which leads me to my first question. 

## üï∏Ô∏è Untangling The Web of Job Titles

Given the vast number of job titles - and 11 different search categories - I wondered which jobs I might qualify for with my degree.  I've often heard that data science graduates are prepared for a wide variety of jobs, and not to limit oneself only to jobs entitled "Data Scientist".  To this end, I focused on the "Qualifications" and "Responsibilities" sections of a the job posting.  I used a community detection algorithm, combined with some network visualization tools, to determine whether the words used to describe these positions are really as different as their titles might indicate. 

Here is how to interpret the network visualization:

* **Squares** represent search terms that were used to find the job postings.
* **Circles** represent terms - qualifications (in the first network) or responsibilities (in the second) - that were listed in the job postings.
* **Lines** connect search terms to the qualifications and responsibilities listed in the job postings.  If there is a line between a circle and a square, that means that the qualification/responsibility (circle) was listed in a job posting discovered with that search term (square).
* **Colors** represent search terms and qualifications/responsibilities that often appeared together, suggesting that the qualifications or responsibilities are similar within those search terms (squares).  This is called a *community, cluster, or group*.
* **Click** on a search term (square) to reveal the associated qualifications or responsibilities (circles), and vice versa (click on a qualification to show associated search terms).  For example, clicking on "data scientist" reveals that statistics, regression, machine learning, and a master's degree are commonly listed qualifications.  Click any blank space on the figure to de-select.
* **Drag** or **zoom** the figure to see the network more clearly.  Refresh the page to reset the network completely.
  
### A network of qualifications ... 
```{=html}
<div class="iframes-container">
    <iframe allowtransparency="true" style="background: #272838;" src="./viz/textnet_qualifications.html" frameborder="0" width="815" height="815" ></iframe>
</div>
```
<font size='3'><center>*A network visualization of qualifications associated with each search term.*</center></font>

Depending on the algorithm I used, I found anywhere between 1 and 3 distinct groups of qualifications amongst the search terms.  In this final iteration, we can see that there are three communities of listed qualifications.  
 
 * **Yellow Group -** *Math and Statistics:*  Primary qualifications explicitly reference math and statistics, as well as regression and R, the statistical programming language.  These are jobs in deep learning, time series, and reinforcement learning.  
 * **Red Group -** *High Experience:*  These jobs reference terms such as experience, skills, "a related field", and a master's degree.  These are more specialized jobs in machine learning, natural language processing (NLP), and blockchain. 
 * **Purple Group -** *Computer Science Focused:*  References more software-focused programming languages such as C++, Java, and Scala.  These are jobs in big data and neural networks.

If you click on the nodes (circles/squares) of the network, you can see that even though distinct groups are formed, there is a lot of overlap in the qualifications.  The main qualifications that are not covered in our program are the more software-oriented programming languages such as C++, Java, and Scala. 

### ... and a network of responsibilities
```{=html }
<div class="iframes-container">

    <iframe allowtransparency="true" style="background: #272838;" src="./viz/textnet_responsibilities.html" frameborder="0" width="815" height="815" ></iframe>

</div>
```
<br>
<font size='3'><center>*A network visualization of responsibilities associated with each search term.*</center></font>

Turning our attention to the responsibilities listed in the job postings, we once again are left with three groups using this specific algorithm.

My impression of these groups is as follows: 

 * **Yellow Group -** *Client-Facing ML:*  Responsiblities include creating Machine Learning (ML) models, with an emphasis on providing value to customers.  These are deep learning, data science, and machine learning jobs.  
 * **Red Group -** *Technical-Managerial:*  Responsiblities that focus on training, management, and providing technical expertise.  These jobs include big data and cloud Computing, blockchain, and more advanced reinforcement learning.  
 * **Purple Group -** *Collaborative Development:*  This group references more 'soft skills' such as collaboration, development, and design.  While these are still very technical positions such as neural networks and NLP, it often takes a big team to build these models!

Overall, there is heavy overlap for the qualifications and responsibilities associated with each search term.  The answer to the question "Are the qualifications and responsibilities for these jobs very different?" is: *probably not.*  Fortunately, it looks like our program prepares us very well for the majority of these positions.

## üëë Do Great Responsibilities Bring Great Benefits?

The language in which a job opportunity is packaged varies greatly from company to company.  Some postings are described extensively, while other simply list a few meager bullet points.  The extent to which the amount of qualifications, responsibilities, and benefits reflect the true nature of a position is unclear.  However, as a prospective applicant, my intuition would be that a job with more listed qualifications and responsibilities should also have more benefits.  At the very least, one would expect companies that are more verbose in their recruitment would have more bullet points in each category: qualifications, responsibilities, and benefits.

To answer this question, I tallied the number of bullet points in each category for all of the positions that listed values for all three and created the following visualization.  Here's how to interpret this plot:

* **Size** of the bubble represents the number of listed benefits.
* **The horizontal position, or x axis** reflects the number of qualifications listed on the job posting.
* **The vertical position, or y axis** marks the number of listed responsibilities.
* **Color** indicates which search term yielded that job posting.
* **Click** on the dropdown menu on the top left to filter by the search term.
* **Hover** your mouse over a bubble to reveal more information about the job represented by the bubble! 

```{python}
#| column: screen
import plotly.graph_objects as go
import plotly.express as px
import pandas as pd
import math

agg_sub = pd.read_csv('./data/bubbleplot_data.csv')

color_map = {
    'block chain': '#434A54',
    'natural language processing': '#8D8361',
    'big data and cloud computing': "#F3DE8A",
    'machine learning': "#EFB988",
    'reinforcement learning': '#EB9486',
    'neural networks': '#B58A90',
    'deep learning': '#9A8595',
    'data scientist': '#7E7F9A',
    'time series analysis': '#BCBCC9',
    'time series': '#BCBCC9',
    'data analyst': '#F9F8F8',
}

# Reference for bubble size
size_ref = 2*max(agg_sub['num_benefits'])/(65**2)

# Create the viz lists
# 1 value true for all 11 categories
viz_lists = [[True if i == j else False for i in range(11)]for j in range(10)] 

# Initialize the figure
fig = go.Figure()

# Loop through each search term
for i, topic in enumerate(agg_sub['category'].unique()):
    # Filter the dataframe by household
    topic_df = agg_sub[agg_sub['category'] == topic]
    
    # Create the customdata for the hover text
    customdata = topic_df[['title', 'company_name', 'location','category', 'num_qualifications', 'num_responsibilities', 'num_benefits']]
    
    fig.add_trace(
        go.Scatter(
            x=topic_df['num_qualifications'],
            y=topic_df['num_responsibilities'],
            customdata=customdata,
            hovertemplate = '<b>%{customdata[0]}</b><br>Company: %{customdata[1]}<br>Location: %{customdata[2]}<br>Search term: %{customdata[3]}<extra></extra><br><br>Number of benefits: %{customdata[6]}',
            name=topic,
            mode = 'markers',
            marker_size = topic_df['num_benefits'],
            marker = dict(color = color_map[topic], sizemode = 'area', sizeref=size_ref, 
                           line_width=2, line_color='darkgrey')
        )
    )

# Full custom hovertemplate:
#'<b>%{customdata[0]}</b><br>Company: %{customdata[1]}<br>Location: %{customdata[2]}<br>Search term: %{customdata[3]}<extra></extra><br>Number of qualifications: %{customdata[4]}<br>Number of responsibilities: %{customdata[5]}<br>Number of benefits: %{customdata[6]}


fig.update_layout(
    title='Number of Listed Qualifications, Responsibilities, and Benefits',
    xaxis=dict(
        title='Number of Listed Qualifications',
        gridcolor='white',
        gridwidth=2,
    ),
    yaxis=dict(
        title='Number of Listed Responsibilities',
        gridcolor='#272838',
        gridwidth=2,
    ),
    paper_bgcolor='#272838',
    plot_bgcolor='#272838',
    legend_title_text = 'Job Search Term',
    font=dict(size=16),
    height = 550
)


# Add a dropdown menu to filter by appliance
fig.update_layout(
    updatemenus=[
        go.layout.Updatemenu(
            type='dropdown',
            showactive=True,
            buttons=[
                {'label': 'All Search Terms', 'method': 'update', 'args': [{'visible': True},                                             {"title": "Number of Listed Qualifications, Responsibilities, and Benefits"},]},
                {'label': 'Blockchain', 'method': 'update', 'args': [{'visible': viz_lists[0]},{"title": "Number of Listed Qualifications, Responsibilities, and Benefits in Job Posting for Careers in Blockchain"}, ]},
                {'label': 'NLP', 'method': 'update', 'args': [{'visible': viz_lists[1]}, {"title": "Number of Listed Qualifications, Responsibilities, and Benefits in Job Posting for Careers in NLP"},]},
                {'label': 'Big Data', 'method': 'update', 'args': [{'visible': viz_lists[2]}, {"title": "Number of Listed Qualifications, Responsibilities, and Benefits in Job Posting for Careers in Big Data"},]},
                {'label': 'Data Analyst', 'method': 'update', 'args': [{'visible': viz_lists[3]}, {"title": "Number of Listed Qualifications, Responsibilities, and Benefits in Job Posting for Careers in Data Analysis"},]},
                {'label': 'Machine Learning', 'method': 'update', 'args': [{'visible': viz_lists[4]}, {"title": "Number of Listed Qualifications, Responsibilities, and Benefits in Job Posting for Careers in Machine Learning"},]},
                {'label': 'Reinforcement Learning', 'method': 'update', 'args': [{'visible': viz_lists[5]}, {"title": "Number of Listed Qualifications, Responsibilities, and Benefits in Job Posting for Careers in Reinforcement Learning"},]},
                {'label': 'Neural Networks', 'method': 'update', 'args': [{'visible': viz_lists[6]}, {"title": "Number of Listed Qualifications, Responsibilities, and Benefits in Job Posting for Careers in Neural Networks"},]},
                {'label': 'Deep Learning', 'method': 'update', 'args': [{'visible': viz_lists[7]}, {"title": "Number of Listed Qualifications, Responsibilities, and Benefits in Job Posting for Careers in Deep Learning"},]},
                {'label': 'Data Scientist', 'method': 'update', 'args': [{'visible': viz_lists[8]}, {"title": "Number of Listed Qualifications, Responsibilities, and Benefits in Job Posting for Careers in Data Science"},]},
                {'label': 'Time Series', 'method': 'update', 'args': [{'visible': viz_lists[9]}, {"title": "Number of Listed Qualifications, Responsibilities, and Benefits in Job Posting for Careers in Time Series"},]}
            ],
        x = -0.005,
        xanchor = 'left',
        y = 1.12,
        yanchor = 'top',
        )
    ]
)

# Find the maximum and minimum values of num_qualifications and num_responsibilities
x_range = [agg_sub['num_qualifications'].min(), agg_sub['num_qualifications'].max()]
y_range = [agg_sub['num_responsibilities'].min(), agg_sub['num_responsibilities'].max()]

# Set the same x and y range for every trace
fig.update_layout(xaxis=dict(range=[-0,30]), yaxis=dict(range=[-2,42]))

fig.update_layout(legend= {'itemsizing': 'constant'})
fig.update_layout(font=dict(color='white'))
fig.update_layout(xaxis=dict(showgrid=False))
fig.update_layout(yaxis=dict(showgrid=False))
fig.show()
```
<font size='3'><center>*A bubble plot representing the relationship between the number of qualifications, responsibilities, and benefits listed in a job posting.*</center></font>

In many cases, there doesn't appear to be much of a relationship between the number of listed responsibilities, qualifications, and benefits.  I admit that this is not the most rigorous way to analyze whether what employers desire in candidates is commensurate with the benefits offered.  However, a disconnect between these three categories may pose a perceptual problem for employers who are trying to attract talent.  For example, a prospective applicant might look at a job posting with 40 listed responsibilities and only 2 benefits - as one company did - and immediately decide not to apply to that position. 

In the **correlation matrix** below:

* **Labels** on the left and bottom indicate the variable being measured.
* **Color** of the square indicates the strength of the relationship.  Lighter, yellow colors indicate a stronger positive relationship, while darker, purple colors indicate a stronger negative relationship. 
* **Numbers** in the squares represent the correlation between the two variables.  Values closer to 1 indicate a stronger positive relationship, while values closer to -1 indicate a stronger negative relationship.  Values close to zero indicate no relationship.  The 1s in the diagonal represent the correlation of a variable with itself, which is always 1.

```{python}
# Load the data
agg_sub = pd.read_csv('./data/bubbleplot_data.csv')

job_types = agg_sub['category'].unique()

# Initialize the figure
fig = go.Figure()

# Calculate the overall correlation matrix for all job types
overall_corr_matrix = agg_sub[['num_qualifications', 'num_responsibilities', 'num_benefits']].corr().round(2)

# Add the overall correlation matrix as the first trace
fig.add_trace(go.Heatmap(
    z=overall_corr_matrix.values,
    x=['Qualifications', 'Responsibilities', 'Benefits'],
    y=['Qualifications', 'Responsibilities', 'Benefits'],
    text=overall_corr_matrix.values,
    texttemplate='%{text}',
    textfont=dict(color='black'),
    colorscale='Plasma',
    zmin=-1,
    zmax=1,
    hovertemplate='%{x} and %{y}<br>Correlation: %{z}<extra></extra>',
    visible=True,
    name='All Job Types'
))


# Create a heatmap for each job type
for job_type in job_types:
    filtered_data = agg_sub[agg_sub['category'] == job_type]
    corr_matrix = filtered_data[['num_qualifications', 'num_responsibilities', 'num_benefits']].corr().round(2)
    fig.add_trace(go.Heatmap(
        z=corr_matrix.values,
        x=['Qualifications', 'Responsibilities', 'Benefits'],
        y=['Qualifications', 'Responsibilities', 'Benefits'],
        text=corr_matrix.values,
        texttemplate='%{text}',
        textfont=dict(color='black'),
        colorscale='Plasma',
        zmin=-1,
        zmax=1,
        hovertemplate='%{x} and %{y}<br>Correlation: %{z}<extra></extra>',
        visible=False,
        name=job_type
    ))

fig.update_layout(
    title='Correlation Matrix of Responsibilities, Qualifications, and Benefits',
    xaxis=dict(
        title='',
        gridcolor='white',
        gridwidth=2,
    ),
    yaxis=dict(
        title='',
        gridcolor='#272838',
        gridwidth=2,
    ),
    paper_bgcolor='#272838',
    plot_bgcolor='#272838',
    font=dict(size=16),
    height=550
)

# Generate the dropdown buttons
# Generate the dropdown buttons
dropdown_buttons = [
    {
        'label': 'All Job Types',
        'method': 'update',
        'args': [
            {'visible': [True if i == 0 else False for i in range(len(job_types) + 1)]},  # Show only the first trace (overall correlation matrix)
            {'title': 'Correlation Matrix of Responsibilities, Qualifications, and Benefits'}
        ]
    }
]

for i, job_type in enumerate(job_types):
    capitalized_job_type = job_type.title()  # Capitalize the first letter of each word
    visible_list = [False] * (len(job_types) + 1)
    visible_list[i + 1] = True  # Adjust the index to account for the added trace
    dropdown_buttons.append(
        {
            'label': capitalized_job_type,
            'method': 'update',
            'args': [
                {'visible': visible_list},
                {'title': f'Correlation Matrix for {capitalized_job_type} Careers'}
            ]
        }
    )

fig.update_layout(
    updatemenus=[
        go.layout.Updatemenu(
            type='dropdown',
            showactive=True,
            buttons=dropdown_buttons,
            x=-0.23,
            xanchor='left',
            y=1.12,
            yanchor='top',
        )
    ]
)

fig.update_layout(font=dict(color='white'))
fig.update_layout(xaxis=dict(showgrid=False))
fig.update_layout(yaxis=dict(showgrid=False))
fig.show()
```
<font size='3'><center>*A correlation matrix between the number of qualifications, responsibilities, and benefits.*</center></font>

Looking at the correlations between the three variables, we can see that the relationship differs by the job type.  NLP jobs stand out with a solid 0.47 correlation between the number of listed benefits and qualifications.  All other correlations are around the 0 to 0.3 range, except for time series which is misleading due to its sample size of 2.  

Out of the 823 job postings in our dataset, only 464 of them listed their benefits up front.  In general, the number of listed requirements for a position are not matched by the number of benefits offered.  The amount of information provided for each category should be considered by both employers and job applicants to better set expectations, facilitate greater transparency, and improve the hiring process for both parties.  

## üó∫Ô∏è Mapping Salaries 

Continuing with our theme of transparency, I imagine much consideration goes into whether a salary should be listed on a posting.  According to <a href="https://www.linkedin.com/business/talent/blog/talent-acquisition/why-you-should-include-salary-ranges-in-job-posts#:~:text=New%20research%20shows%20what%20many,affect%20their%20decision%20to%20apply." target="_blank">LinkedIn</a>, 91% of job seekers said seeing a salary range on a job posting affects their decision to apply for a job.  In our sample, only 133 postings listed a salary range - approximately 15% of all jobs in the dataset. 

Most of the salaries are listed as a range with a minimum and a maximum.  To visualize the range of salaries, I created a map of the job postings. 

In the map below:

* **Circles** represent the salary of the position.  The inner circle is scaled to the minimum salary, while the outer circle is scaled to the outer salary.
* **Click** on a circle to reveal more information about a job.  
* **Scroll** to zoom in on a region and see the individual jobs (try the DC metro area!).
* **Filter** the map and make the remote jobs visible by clicking the checkbox in the top right corner.  Keep in mind that remote jobs are listed at random locations within the continental USA.
* **Note** that some jobs were hourly, and were converted to yearly salaries by multiplying the hourly wage by 2,080 (the approximate number of hours worked in a year).  These are noted in the individual information box that pops up when you click on the circle.
* **Further note** that locations only reflect the city and state listed in the posting, not actual addresses since they were not provided.

### Room for Negotiation: A Map of Salary Ranges
```{python}
#| column: page
import pandas as pd
import folium
from folium import LayerControl
from colorsys import rgb_to_hls, hls_to_rgb
from matplotlib.colors import hex2color


def marker_size_and_color(salary, time_interval):
    base_color = "#85bb65"
    if time_interval == 'a year':
        size = salary / 5000
    elif time_interval == 'an hour':
        annual_salary = salary * 2080
        size = annual_salary / 5000

    r, g, b = hex2color(base_color)
    h, l, s = rgb_to_hls(r, g, b)
    l *= 0.5 + 0.5 * (1 - size / 20)
    r, g, b = hls_to_rgb(h, l, s)
    color = f'#{int(r * 255):02x}{int(g * 255):02x}{int(b * 255):02x}'

    opacity = min(1.0, 0.5 + 0.5 * (size / (20*2)))
    return size, base_color, 0.9

job_postings_df = pd.read_csv("./data/salary_location_clean.csv")

# Create a base map centered on the United States
map_job = folium.Map(location=[38.407512, -100.321473], zoom_start=4, tiles='CartoDB dark_matter')

# Create layers for in-person and remote jobs
in_person_layer = folium.FeatureGroup(name="In-person")
remote_layer = folium.FeatureGroup(name="Remote", show=False)

# Add job postings to the map
# Add job postings to the map
for index, posting in job_postings_df.iterrows():
    # For min_salary
    size, color, opacity = marker_size_and_color(posting['min_salary'], posting['time_interval'])
    salary_label = (
        f"${posting['min_salary']:,} - ${posting['max_salary']:,} a year"
        if posting['time_interval'] == 'a year'
        else f"${posting['min_salary'] * 2080:,} - ${posting['max_salary'] * 2080:,} a year (hourly)"
    )
    layer = in_person_layer if posting['location'].lower() not in ['anywhere', 'united states'] else remote_layer
    folium.CircleMarker(
        location=[posting['latitude'], posting['longitude']],
        radius=size,
        color='white',
        weight = 1,
        fill=True,
        fill_color="#305718",
        fill_opacity=opacity,
        popup=(
            f"<strong>{posting['name']}</strong><br>"
            f"Salary: {salary_label}<br>"
        ),
        tooltip=posting['name'],
    ).add_to(layer)

    # For max_salary
    size, color, opacity = marker_size_and_color(posting['max_salary'], posting['time_interval'])
    folium.CircleMarker(
        location=[posting['latitude'], posting['longitude']],
        radius=size,
        color='white',
        weight = 1,
        fill=True,
        fill_color=color,
        fill_opacity=0.8,
        popup=(
            f"<strong>{posting['name']}</strong><br><br>"
            f"<strong> Job title: </strong>{posting['job_title']}<br><br>"
            f"<strong> Location: </strong>{posting['location']}<br><br>"
            f"<strong>Salary:</strong> {salary_label}<br>"
        ),
        tooltip=posting['name'],
    ).add_to(layer)
    
map_job.add_child(in_person_layer)
map_job.add_child(remote_layer)

# Add layer control to the map with the menu open by default
folium.LayerControl(collapsed=False).add_to(map_job)
map_job
```
<font size='3'><center><br>*A map of the jobs that listed a salary.*</center></font>

Examining this map, some trends become apparent.  Most of the positions have a fair amount of room for negotiation.  On average, the maximum salary is $35,000 or 61% more than the minimum salary, but there is considerable variance.  For example, try to find the remote Fintech Recruiters job, with a minimum of $100,000 and a maximum of $500,000.  A prospective applicant's perception of a posting may be impacted by the listed range of a salary.  A fixed salary might seem rigid and convey a sense of strict salary structure, whereas a position with a very broad range may seem confusing or too good to be true. 

We can also see that in-person jobs tend to be similar within a region.  Looking at San Francisco as an example, we can see that the salaries seem to be within the same approximate range of $100,000 - $250,000.  Whether a salary is similar to other salaries in the region can also contribute to a prospective applicant's decision to apply for the position.  Jobs with salaries much lower than the regional standard may be completely passed over. 

Choosing whether to post a salary is a significant decision for an employer.  I believe that listing a salary range is best; this sets expectations for the applicant and promotes fairness in negotiation.  The talent pool available to the employer will also be larger, since more people will want to apply to a job that posts a salary within their desired range.  

## üîé Conclusions

Let's summarize the key insights from this mini-project:

1. <b>Data science jobs are often called something other than "Data Scientist."</b>  Only 21 of the positions in our dataset actually had "Data Scientist" in the job title.  Despite using 11 different search terms, the qualifications and responsibilities for these categories heavily overlapped in our network analysis.  Data science graduates should not hesitate to apply to positions that do not explicitly mention data science for fear of being unqualified. 
2. <b>Employers should be mindful of the types of information they provide for a job posting.</b> There was not a strong relationship between the quantity of responsibilities/qualifications listed and the quantity of benefits listed.  While I simply counted the number of bullet points, and those may not be a good proxy for the true value of the benefits, they may impact a job seeker's perception.  If tens of responsibilities are listed but few benefits, it may look like the job asks for more than it provides, and reduce interest in the job. 
3. <b>Listing a salary range on a job posting is an impactful decision.</b>  Job seekers can easily compare salaries to similar jobs in their area.  If the salaries are significantly less than comparable positions, this will discourage applicants.  Posting a salary range can convey a sense of flexibility and willingness to compensate based on individual factors.  If the range is small, it could suggest a fixed salary structure that may be undesirable.  Huge salary ranges may make the posting more confusing (maybe the company is hiring at different levels) - or worse, it could make the job posting seem like it is fake.  On average, a maximum salary that is about 60% more than the minimum will seem reasonable. 

In building this project, I've learned a great deal about the types of jobs available to a data science graduate student like myself.  I feel more confident in applying to jobs with unfamiliar titles.  Finally, I am better equipped to know what to look for in a posting's qualifications, responsibilities, benefits, and salary.  Thanks for reading! 

## üìä Methodology

<a href="methods.html">Click here</a> to see the methodology used in this project.

## üñ•Ô∏è Code

<a href="code.html">Click here</a> to see the code used in this project.